<?php

namespace Tests\JanPantel\LaravelFluentPlus;

use JanPantel\LaravelFluentPlus\FluentPlus;
use JanPantel\LaravelFluentPlus\Transformers\TransformerInterface;
use PHPUnit\Framework\TestCase;

class CustomTransformerTest extends TestCase
{
    public function testCustomTransformer()
    {
        $prop = CustomTransformerFluent::PROP;

        $instance = new CustomTransformerFluent([$prop => 'something']);

        $this->assertEquals(CustomTransformer::RETURN_VALUE, $instance->$prop);
    }
}

class CustomTransformerFluent extends FluentPlus
{
    const PROP = 'customprop';

    protected function getCasts()
    {
        return [
            self::PROP => CustomTransformer::DEFINITION
        ];
    }

    protected function getTransformers()
    {
        return array_merge(parent::getTransformers(), [new CustomTransformer]); // TODO: Change the autogenerated stub
    }
}

class CustomTransformer implements TransformerInterface
{
    const DEFINITION = 'foobar';
    const RETURN_VALUE = 'helloworld';

    /**
     * @inheritDoc
     */
    public function handles($castDefinition, $value)
    {
        return $castDefinition == self::DEFINITION;
    }

    /**
     * @inheritDoc
     */
    public function transform($castDefinition, $value)
    {
        return self::RETURN_VALUE;
    }
}